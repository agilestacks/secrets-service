FORMAT: 1A
HOST: http://secrets.agilestacks.com/api/v1

# Secrets Service API

Secrets Service has protected HTTP API to provide access to all it's functions, such as:

- saving and retrieving secrets;
- obtaining expiring tokens to access secrets;
- manage secrets permissions.

Please read [design](https://github.com/agilestacks/secrets-service/blob/master/README.md) first.

There are three types of supported entities: `cloud-accounts`, `environments`, `templates`, `instances`, and `licenses`.

Supported types of `kind` field in secret object are: `password`, `cloudAccount`, `cloudAccessKeys`, `caPrivateKey`, `certificate`, `sshKey`, `usernamePassword`, `text`, `license`.

## Secret [/secrets/{entityKind}/{entityId}/{secretId}]

+ Parameters
    + entityKind: `environments` - Entity type identifier
    + entityId: `123` (string) - ID of the Entity
    + secretId: `02a669c0-543b-432f-a11d-fb21f29c7200` (string) - ID of the Secret


### Retrieve Secret [GET]

Reading cloud account entity returns original security-sensitive information masked.
The only way to use cloud account is to request session keys via `/session-keys`.

Password:

```json
{
    "id": "02a669c0-543b-432f-a11d-fb21f29c7200",
    "name": "component.postgresql.password",
    "kind": "password",
    "username": "automation-hub",
    "password": "jai0eite3X"
}
```

Cloud account entity:

```json
{
    "id": "4ae21e5e-c49f-4222-b164-ffb03d8448dd",
    "name": "My AWS",
    "kind": "cloudAccount",
    "cloud": "aws",
    "accessKey": "AKIA****************",
    "secretKey": "IqCFm0**********************************"
}
```

```json
{
    "id": "4ae21e5e-c49f-4222-b164-ffb03d8448dd",
    "name": "My AWS",
    "kind": "cloudAccount",
    "cloud": "aws",
    "roleArn": "arn:aws:iam::973998981304:role/xaccount-*********************",
    "externalId": "4f60642506******************************"
}
```

+ Request

    + Headers

            X-Secrets-Token: user-token

+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "id": "02a669c0-543b-432f-a11d-fb21f29c7200",
                "name": "component.postgresql.password",
                "kind": "password",
                "username": "automation-hub",
                "password": "jai0eite3X"
            }

+ Response 404

+ Response 403

+ Response 502

+ Response 504


### Retrieve Cloud Account Session [POST /secrets/cloud-account/{cloudAccountId}/{secretId}/session-keys]

Post to cloud account session endpoint returns AWS keys valid for 1 hour.
Optionaly send `purpose` to be included as part of _role session name_ sent to STS.

If cloud account credentials are `accessKey` and `secretKey` pair, then is must be keys either of account
root user or IAM user with MFA **disabled**. The session keys obtained cannot call IAM API due to
restriction imposed by AWS, from [STS GetSessionToken](http://docs.aws.amazon.com/STS/latest/APIReference/API_GetSessionToken.html):

> The temporary security credentials created by GetSessionToken can be used to make API calls to any AWS service with the following exceptions:
>
> - You cannot call any IAM APIs unless MFA authentication information is included in the request.
> - You cannot call any STS API except AssumeRole or GetCallerIdentity.

+ Parameters
    + cloudAccountId: `123` (string) - ID of the Cloud Account
    + secretId: `02a669c0-543b-432f-a11d-fb21f29c7200` (string) - ID of the Secret

+ Request

    + Headers

            X-Secrets-Token: user-token

    + Body

            {
                "purpose": "stack-k8s-aws deployment"
            }


+ Response 200 (application/json; charset=utf-8)

    + Body

            {
                "cloud": "aws",
                "accessKey": "AKIA****************",
                "secretKey": "IqCFm0**********************************",
                "sessionToken": "...",
                "ttl": 3600
            }

+ Response 404

+ Response 403

+ Response 405 (application/json; charset=utf-8)

    + Body

            "errors": [
                    {
                        "type": "badRequest",
                        "detail": "The requested secret is not `cloudAccount` kind",
                        "meta": {
                            "errors": {
                                "type": "badRequest",
                                "detail": "The requested secret is not `cloudAccount` kind",
                                "meta": {
                                    "stack":"Error: The requested secret is not `cloudAccount` kind...js:76:19)"
                                }
                            }
                        }
                    }
                ]
            }

+ Response 504

+ Response 502 (application/json; charset=utf-8)

    + Body

            "errors": [
                    {
                        "type": "serverError",
                        "detail": "AWS STS error: ...",
                        "meta": {
                            "errors": {
                                "type": "serverError",
                                "detail": "AWS STS error: ...",
                                "meta": {
                                    "stack":"Error: AWS STS error: ......js:76:19)"
                                }
                            }
                        }
                    }
                ]
            }


### Create Secret [POST /secrets/{entityKind}/{entityId}]

+ Parameters
    + entityKind: `environments` - Entity type identifier
    + entityId: `123` (string) - ID of the Entity

+ Request (application/json; charset=utf-8)

    + Headers

            X-Secrets-Token: user-token

    + Body

            {
                "name": "component.postgresql.password",
                "kind": "password",
                "username": "automation-hub",
                "password": "jai0eite3X"
            }

+ Response 201 (application/json; charset=utf-8)

    + Headers

            Location: /api/v1/environments/123/secrets/02a669c0-543b-432f-a11d-fb21f29c7200

    + Body

            {
                "id": "02a669c0-543b-432f-a11d-fb21f29c7200"
            }

+ Response 403

+ Response 400 (application/json; charset=utf-8)

            "errors": [
                    {
                        "type": "badRequest",
                        "detail": "Error parse JSON input",
                        "meta": {
                            "errors": {
                                "type": "badRequest",
                                "detail": "Error parse JSON input",
                                "meta": {
                                    "stack":"Error: Error parse JSON input...js:76:19)"
                                }
                            }
                        }
                    }
                ]
            }

+ Response 502

+ Response 504


### Update Secret [PUT]

The secret `kind` must match otherwise `409 Conflict` will be returned.

+ Request (application/json; charset=utf-8)

    + Headers

            X-Secrets-Token: user-token

    + Body

            {
                "name": "component.postgresql.password",
                "kind": "password",
                "username": "automation-hub",
                "password": "jai0eite3X"
            }

+ Response 204

+ Response 404

+ Response 403

+ Response 400 (application/json; charset=utf-8)

            "errors": [
                    {
                        "type": "badRequest",
                        "detail": "`password` field is not set",
                        "meta": {
                            "errors": {
                                "type": "badRequest",
                                "detail": "`password` field is not set",
                                "meta": {
                                    "stack":"Error: `password` field is not set...js:76:19)"
                                }
                            }
                        }
                    }
                ]
            }

+ Response 409 (application/json; charset=utf-8)

    + Body

            "errors": [
                    {
                        "type": "badRequest",
                        "detail": "`kind` doesn't match",
                        "meta": {
                            "errors": {
                                "type": "badRequest",
                                "detail": "`kind` doesn't match",
                                "meta": {
                                    "stack":"Error: `kind` doesn't match...js:76:19)"
                                }
                            }
                        }
                    }
                ]
            }

+ Response 502

+ Response 504


### Delete Secret [DELETE]

+ Request

    + Headers

            X-Secrets-Token: user-token

+ Response 204

+ Response 404

+ Response 403

+ Response 502

+ Response 504



## User [/users/{userId}]

User is currently an Okta user and is addressed by Okta user Id with prefix `okta-`, e.g. `okta-00ub0oNGTSWTBKOLGLNR`.

+ Parameters
    + userId: `okta-00ub0oNGTSWTBKOLGLNR` (string) - ID of the User


### Create User [PUT]

`roleId` must be saved by calling service for use with `/login`.

+ Request

    + Headers

            X-Secrets-Token: high-privilege-auth-service-token

+ Response 201 (application/json; charset=utf-8)

    + Body

            {
                "roleId": "f2db06c7-1b3c-9262-1116-fa1842a5c567"
            }

+ Response 403

+ Response 502

+ Response 504


### Delete User [DELETE]

+ Request

    + Headers

            X-Secrets-Token: high-privilege-auth-service-token

+ Response 204

+ Response 404

+ Response 403

+ Response 502

+ Response 504


### Update User Environments access [PUT /users/{userId}/environments]

Put a list of `environmentId`-s the user has access to.

+ Parameters
    + userId: `okta-00ub0oNGTSWTBKOLGLNR` (string) - ID of the User

+ Request (application/json; charset=utf-8)

    + Headers

            X-Secrets-Token: high-privilege-automation-hub-token | high-privilege-auth-service-token?

    + Body

            {
                "environments": ["env id 1", "env id 2"]
            }

+ Response 204

+ Response 404

+ Response 403

+ Response 400 (application/json; charset=utf-8)

            "errors": [
                    {
                        "type": "badRequest",
                        "detail": "`environments` field is not set",
                        "meta": {
                            "errors": {
                                "type": "badRequest",
                                "detail": "`environments` field is not set",
                                "meta": {
                                    "stack":"Error: `environments` field is not set...js:76:19)"
                                }
                            }
                        }
                    }
                ]
            }

+ Response 502

+ Response 504


### Update User Cloud Account access [PUT /users/{userId}/cloud-accounts]

Put a list of `cloudAccountId`-s the user has access to.

+ Parameters
    + userId: `okta-00ub0oNGTSWTBKOLGLNR` (string) - ID of the User

+ Request (application/json; charset=utf-8)

    + Headers

            X-Secrets-Token: high-privilege-automation-hub-token | high-privilege-auth-service-token

    + Body

            {
                "cloudAccounts": ["cloud account id 1", "cloud account id 2"]
            }

+ Response 204

+ Response 404

+ Response 403

+ Response 400 (application/json; charset=utf-8)

            "errors": [
                    {
                        "type": "badRequest",
                        "detail": "`cloudAccounts` field is not set",
                        "meta": {
                            "errors": {
                                "type": "badRequest",
                                "detail": "`cloudAccounts` field is not set",
                                "meta": {
                                    "stack":"Error: `cloudAccounts` field is not set...js:76:19)"
                                }
                            }
                        }
                    }
                ]
            }

+ Response 502

+ Response 504


### Login User to obtain Secrets Token [POST /users/{userId}/login]

Login to obtain `user-token`.

+ Parameters
    + userId: `okta-00ub0oNGTSWTBKOLGLNR` (string) - ID of the User

+ Request (application/json; charset=utf-8)

    + Headers

            X-Secrets-Token: low-privilege-auth-service-token

    + Body

            {
                "roleId": "0dcc3856-c11b-9673-bd30-b083cbae4987"
            }

+ Response 200 (application/json; charset=utf-8)

            {
                "token": "c9086cfc-c1a4-4609-546d-1f9d860c8ac3",
                "ttl": 3600
            }

+ Response 404

+ Response 403

+ Response 400 (application/json; charset=utf-8)

            {
                "errors":[
                    {
                        "type": "badRequest",
                        "detail": "Either `highPrivRoleId` or `lowPrivRoleId` field is not set",
                        "meta": {
                            "errors": {
                                "type": "badRequest",
                                "detail": "Either `highPrivRoleId` or `lowPrivRoleId` field is not set",
                                "meta": {
                                    "stack":"Error: Either `highPrivRoleId` or `lowPrivRoleId`...js:76:19)"
                                }
                            }
                        }
                    }
                ]
            }

+ Response 502

+ Response 504



## Apps [/apps/{appId}]

Currently recognised apps are:

- Authentication Service with Id `authentication-service`;
- Automation Hub with Id `automation-hub`.

Request source IP CIDR will be checked too.

+ Parameters
    + appId: `authentication-service` (string) - ID of the Service / App


### Login App to obtain Secrets Token [POST /apps/{appId}/login]

Login to obtain `high` and `low-privilege-auth-service-token`-s .

+ Parameters
    + appId: `authentication-service` (string) - ID of the Service / App

+ Request (application/json; charset=utf-8)

    + Body

            {
                "highPrivRoleId": "f696ed85-eab6-484f-8f1b-adac94cffc08",
                "lowPrivRoleId": "41bc5ff3-077c-4613-9419-77fe89267113"
            }

+ Response 200 (application/json; charset=utf-8)

            {
                "highPrivToken": "89b144e3-d785-46b4-ac3f-5cc504bfc624",
                "lowPrivToken": "4f5b5510-a6ac-41e1-b4bc-bcff4f522769",
                "ttl": 3600
            }

+ Response 404

+ Response 403

+ Response 400 (application/json; charset=utf-8)

            {
                "errors":[
                    {
                        "type": "badRequest",
                        "detail": "`highPrivRoleId` field is not set",
                        "meta": {
                            "errors": {
                                "type": "badRequest",
                                "detail": "`highPrivRoleId` field is not set",
                                "meta": {
                                    "stack":"Error: `highPrivRoleId` field is not set...js:76:19)"
                                }
                            }
                        }
                    }
                ]
            }

+ Response 502

+ Response 504



## Token [/tokens]


### Renew Token [POST /tokens/renew]

`X-Secrets-Token` is the token to operate on.

+ Request

    + Headers

            X-Secrets-Token: token

+ Response 200

    + Body

            {
                "ttl": 3600
            }

+ Response 403

+ Response 502

+ Response 504


### Revoke Token [POST /tokens/revoke]

Authentication Service should revoke user token on user logout.

`X-Secrets-Token` is the token to operate on.

+ Request

    + Headers

            X-Secrets-Token: token

+ Response 204

+ Response 403

+ Response 502

+ Response 504
